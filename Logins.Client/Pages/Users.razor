@page "/Users"
@inject IUserClientService UserService
@inject NavigationManager NavigationManager
@attribute [Authorize]


<AuthorizeView>
	<Authorized>
		<PageTitle>Users</PageTitle>
		<div class="col-12 row" style="text-align:left; font-weight:bold">
			<span class="col-12" style="color:red">@ServiceMesssage</span>
		</div>
		<table class="table">
			<thead>
				<tr>
					<th>Email</th>
					<th>UserType</th>
					<th>First Name</th>
					<th>Last Name</th>
					<th>Position</th>
					<th>Locked</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var user in UsersList)
				{
					<tr>
						<td>@user.Email</td>
						<td>@user.UserType</td>

						<td>@user.FirstName</td>
						<td>@user.LastName</td>
						<td>@user.Position</td>
						<td>
							@if (user.Locked)
							{
								<input type="checkbox" disabled checked>
							}
							else
							{
								<input type="checkbox" disabled>
							}
						</td>
						<td>
							<div>

								<button class="btn btn-primary" title="Update User" @onclick="(() => UpdateUser(user.Id))"><i class="oi oi-pencil"></i></button>
								<button class="btn btn-warning" title="Change Password" @onclick="(() => ChangePassword(user.Id))"><i class="oi oi-key"></i></button>
								<button class="btn btn-danger" title="Delete User" @onclick="(() => DeleteUser(user.Id))"><i class="oi oi-trash"></i></button>

							</div>
						</td>

					</tr>
				}
			</tbody>
		</table>
		<button class="btn btn-primary" title="Create User" @onclick="CreateUser">Create User</button>

	</Authorized>
	<NotAuthorized>
		<p role="alert">You're not authorized</p>
	</NotAuthorized>
</AuthorizeView>



@code {
	public List<UserListDto> UsersList = new();
	public string ServiceMesssage { get; set; } = string.Empty;
	protected override async Task OnInitializedAsync()
	{
		var result = await UserService.GetUsers();
		if (!result.HasError)
		{
			UsersList = result.Data;
		}
		else
		{
			ServiceMesssage = result.Message;
		}

	}

	void UpdateUser(string id)
	{
		NavigationManager.NavigateTo($"UpdateUser/{id}");
	}

	void CreateUser()
	{
		NavigationManager.NavigateTo("CreateUser");
	}

	async Task DeleteUser(string id)
	{
		var delterResult = await UserService.DeleteUser(id);
		if (!delterResult.HasError)
		{
			var LoadResult = await UserService.GetUsers();
			if (!LoadResult.HasError)
			{
				UsersList = LoadResult.Data;
			}
			else
			{
				NavigationManager.NavigateTo("Error");
			}
		}
		else
		{
			NavigationManager.NavigateTo("Error");
		}
	}

	void ChangePassword(string id)
	{
		NavigationManager.NavigateTo($"ChangePassword/{id}");
	}
}
