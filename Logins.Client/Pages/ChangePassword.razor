@page "/ChangePassword/{id}"
@inject IUserClientService UserService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3>Change Password</h3>
<hr />
<EditForm Model="model" OnValidSubmit="OnValidSubmit">
	<FluentValidationValidator />
	<ValidationSummary />

	<div class="form-group">
		<label class="col-form-label">Email: </label>
		<div class="col-md-3">
			<InputText class="form-control" @bind-Value="@model.Email" readonly></InputText>
			<ValidationMessage For="@(()=> model.Email)" />
		</div>
	</div>

	<div class="form-group">
		<label class="col-form-label">Password: </label>
		<div class="col-md-3">
			<InputText type="password" class="form-control" @bind-Value="@model.Password"></InputText>
			<ValidationMessage For="@(()=> model.Password)" />
		</div>
	</div>
	<div class="form-group">
		<label class="col-form-label">ConfirmPassword: </label>
		<div class="col-md-3">
			<InputText type="password" class="form-control" @bind-Value="@model.ConfirmPassword"></InputText>
			<ValidationMessage For="@(()=> model.ConfirmPassword)" />
		</div>
	</div>

	<br />
	<button type="submit" class="btn btn-success">Change Password</button>

</EditForm>


@code {
	[Parameter]
	public string id { get; set; } = string.Empty;

	ChangePasswordDto model = new ChangePasswordDto();

	protected override async Task OnParametersSetAsync()
	{
		var result = await UserService.GetUserProfile(id);
		if (!result.HasError)
		{
			model.Id = result.Data.Id;
			model.Email = result.Data.Email;
		}
		else
		{
			NavigationManager.NavigateTo("Error");
		}
	}

	async Task OnValidSubmit()
	{
		var result = await UserService.ChangePassowrd(model);
		if (!result.HasError)
		{
			NavigationManager.NavigateTo("Users");
		}
		else
		{
			NavigationManager.NavigateTo("Error");
		}
	}

}
